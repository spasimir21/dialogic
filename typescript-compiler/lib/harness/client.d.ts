import { ApplicableRefactorInfo, CallHierarchyIncomingCall, CallHierarchyItem, CallHierarchyOutgoingCall, Classifications, ClassifiedSpan, CodeFixAction, CompletionEntryDetails, CompletionInfo, DefinitionInfo, DefinitionInfoAndBoundSpan, Diagnostic, DiagnosticWithLocation, DocCommentTemplateOptions, DocumentHighlights, DocumentSpan, EditorOptions, EmitOutput, FileTextChanges, FormatCodeOptions, FormatCodeSettings, ImplementationLocation, InlayHint, InteractiveRefactorArguments, LanguageService, LanguageServiceHost, NavigateToItem, NavigationBarItem, NavigationTree, notImplemented, OrganizeImportsArgs, OutliningSpan, Program, QuickInfo, RefactorEditInfo, RefactorTriggerReason, ReferencedSymbol, ReferenceEntry, RenameInfo, RenameLocation, SemanticClassificationFormat, SignatureHelpItems, SourceFile, Symbol, TextChange, TextInsertion, TextRange, TextSpan, TodoComment, TodoCommentDescriptor, UserPreferences } from "./_namespaces/ts";
import { protocol } from "./_namespaces/ts.server";
export interface SessionClientHost extends LanguageServiceHost {
    writeMessage(message: string): void;
}
/** @internal */
export declare function extractMessage(message: string): string;
export declare class SessionClient implements LanguageService {
    private host;
    private sequence;
    private lineMaps;
    private messages;
    private lastRenameEntry;
    private preferences;
    constructor(host: SessionClientHost);
    onMessage(message: string): void;
    private writeMessage;
    private getLineMap;
    private lineOffsetToPosition;
    private positionToOneBasedLineOffset;
    private convertCodeEditsToTextChange;
    private processRequest;
    private processResponse;
    /** @internal */
    configure(preferences: UserPreferences): void;
    /** @internal */
    setFormattingOptions(formatOptions: FormatCodeSettings): void;
    /** @internal */
    setCompilerOptionsForInferredProjects(options: protocol.CompilerOptions): void;
    openFile(file: string, fileContent?: string, scriptKindName?: "TS" | "JS" | "TSX" | "JSX"): void;
    closeFile(file: string): void;
    createChangeFileRequestArgs(fileName: string, start: number, end: number, insertString: string): protocol.ChangeRequestArgs;
    changeFile(fileName: string, args: protocol.ChangeRequestArgs): void;
    toLineColumnOffset(fileName: string, position: number): {
        line: number;
        character: number;
    };
    getQuickInfoAtPosition(fileName: string, position: number): QuickInfo;
    getProjectInfo(file: string, needFileNameList: boolean): protocol.ProjectInfo;
    getCompletionsAtPosition(fileName: string, position: number, _preferences: UserPreferences | undefined): CompletionInfo;
    getCompletionEntryDetails(fileName: string, position: number, entryName: string, _options: FormatCodeOptions | FormatCodeSettings | undefined, source: string | undefined, _preferences: UserPreferences | undefined, data: unknown): CompletionEntryDetails;
    getCompletionEntrySymbol(_fileName: string, _position: number, _entryName: string): Symbol;
    getNavigateToItems(searchValue: string, maxResultCount: number, file: string | undefined, _excludeDtsFiles: boolean | undefined, excludeLibFiles: boolean | undefined): NavigateToItem[];
    getFormattingEditsForRange(file: string, start: number, end: number, _options: FormatCodeOptions): TextChange[];
    getFormattingEditsForDocument(fileName: string, options: FormatCodeOptions): TextChange[];
    getFormattingEditsAfterKeystroke(fileName: string, position: number, key: string, _options: FormatCodeOptions): TextChange[];
    getDefinitionAtPosition(fileName: string, position: number): DefinitionInfo[];
    getDefinitionAndBoundSpan(fileName: string, position: number): DefinitionInfoAndBoundSpan;
    getTypeDefinitionAtPosition(fileName: string, position: number): DefinitionInfo[];
    getSourceDefinitionAndBoundSpan(fileName: string, position: number): DefinitionInfo[];
    getImplementationAtPosition(fileName: string, position: number): ImplementationLocation[];
    findReferences(fileName: string, position: number): ReferencedSymbol[];
    getReferencesAtPosition(fileName: string, position: number): ReferenceEntry[];
    getFileReferences(fileName: string): ReferenceEntry[];
    getEmitOutput(file: string): EmitOutput;
    getSyntacticDiagnostics(file: string): DiagnosticWithLocation[];
    getSemanticDiagnostics(file: string): Diagnostic[];
    getSuggestionDiagnostics(file: string): DiagnosticWithLocation[];
    private getDiagnostics;
    getCompilerOptionsDiagnostics(): Diagnostic[];
    getRenameInfo(fileName: string, position: number, _preferences: UserPreferences, findInStrings?: boolean, findInComments?: boolean): RenameInfo;
    getSmartSelectionRange(): never;
    findRenameLocations(fileName: string, position: number, findInStrings: boolean, findInComments: boolean, preferences: UserPreferences | boolean | undefined): RenameLocation[];
    private decodeNavigationBarItems;
    getNavigationBarItems(file: string): NavigationBarItem[];
    private decodeNavigationTree;
    getNavigationTree(file: string): NavigationTree;
    private decodeSpan;
    private decodeLinkDisplayParts;
    getNameOrDottedNameSpan(_fileName: string, _startPos: number, _endPos: number): TextSpan;
    getBreakpointStatementAtPosition(_fileName: string, _position: number): TextSpan;
    getSignatureHelpItems(fileName: string, position: number): SignatureHelpItems | undefined;
    getDocumentHighlights(fileName: string, position: number, filesToSearch: string[]): DocumentHighlights[];
    getOutliningSpans(file: string): OutliningSpan[];
    getTodoComments(_fileName: string, _descriptors: TodoCommentDescriptor[]): TodoComment[];
    getDocCommentTemplateAtPosition(_fileName: string, _position: number, _options?: DocCommentTemplateOptions, _formatOptions?: FormatCodeSettings): TextInsertion;
    isValidBraceCompletionAtPosition(_fileName: string, _position: number, _openingBrace: number): boolean;
    getJsxClosingTagAtPosition(_fileName: string, _position: number): never;
    getLinkedEditingRangeAtPosition(_fileName: string, _position: number): never;
    getSpanOfEnclosingComment(_fileName: string, _position: number, _onlyMultiLine: boolean): TextSpan;
    getCodeFixesAtPosition(file: string, start: number, end: number, errorCodes: readonly number[]): readonly CodeFixAction[];
    getCombinedCodeFix: typeof notImplemented;
    applyCodeActionCommand: typeof notImplemented;
    provideInlayHints(file: string, span: TextSpan): InlayHint[];
    private createFileLocationOrRangeRequestArgs;
    private createFileLocationRequestArgs;
    private createFileRangeRequestArgs;
    private createFileLocationRequestArgsWithEndLineAndOffset;
    getApplicableRefactors(fileName: string, positionOrRange: number | TextRange, preferences: UserPreferences | undefined, triggerReason?: RefactorTriggerReason, kind?: string, includeInteractiveActions?: boolean): ApplicableRefactorInfo[];
    getMoveToRefactoringFileSuggestions(fileName: string, positionOrRange: number | TextRange): {
        newFileName: string;
        files: string[];
    };
    getEditsForRefactor(fileName: string, _formatOptions: FormatCodeSettings, positionOrRange: number | TextRange, refactorName: string, actionName: string, preferences: UserPreferences | undefined, interactiveRefactorArguments?: InteractiveRefactorArguments): RefactorEditInfo;
    organizeImports(_args: OrganizeImportsArgs, _formatOptions: FormatCodeSettings): readonly FileTextChanges[];
    getEditsForFileRename(): never;
    private convertCodeEditsToTextChanges;
    private convertChanges;
    convertTextChangeToCodeEdit(change: protocol.CodeEdit, fileName: string): TextChange;
    getBraceMatchingAtPosition(fileName: string, position: number): TextSpan[];
    configurePlugin(pluginName: string, configuration: any): void;
    getIndentationAtPosition(_fileName: string, _position: number, _options: EditorOptions): number;
    getSyntacticClassifications(_fileName: string, _span: TextSpan): ClassifiedSpan[];
    getSemanticClassifications(_fileName: string, _span: TextSpan): ClassifiedSpan[];
    getEncodedSyntacticClassifications(_fileName: string, _span: TextSpan): Classifications;
    getEncodedSemanticClassifications(file: string, span: TextSpan, format?: SemanticClassificationFormat): Classifications;
    private convertCallHierarchyItem;
    prepareCallHierarchy(fileName: string, position: number): CallHierarchyItem | CallHierarchyItem[] | undefined;
    private convertCallHierarchyIncomingCall;
    provideCallHierarchyIncomingCalls(fileName: string, position: number): CallHierarchyIncomingCall[];
    private convertCallHierarchyOutgoingCall;
    provideCallHierarchyOutgoingCalls(fileName: string, position: number): CallHierarchyOutgoingCall[];
    getSupportedCodeFixes(): readonly string[];
    getProgram(): Program;
    getCurrentProgram(): Program | undefined;
    getAutoImportProvider(): Program | undefined;
    updateIsDefinitionOfReferencedSymbols(_referencedSymbols: readonly ReferencedSymbol[], _knownSymbolSpans: Set<DocumentSpan>): boolean;
    getNonBoundSourceFile(_fileName: string): SourceFile;
    getSourceFile(_fileName: string): SourceFile;
    cleanupSemanticCache(): void;
    getSourceMapper(): never;
    clearSourceMapperCache(): never;
    toggleLineComment(): TextChange[];
    toggleMultilineComment(): TextChange[];
    commentSelection(): TextChange[];
    uncommentSelection(): TextChange[];
    dispose(): void;
}
//# sourceMappingURL=client.d.ts.map